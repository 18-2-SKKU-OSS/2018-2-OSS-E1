Let's see if you can guess this?  당신이 이것을 유추해낼 수 있을 지 한 번 볼까요?

a, b = a[b] = {}, 5

결과 : 
   >>> a
   {5: ({...}, 5)}

설명 : 
  Python 언어 참조에 따르면 할당문은 다음과 같은 형식을 가지고 있습니다.
  (target_list "=")+ (expression_list | yield_expression)
  그리고 할당문은 표현 목록(단일 표현식 또는 쉼표로 구분된 리스트(튜플이 생성됨)일 수 있음을 기억하십시오)을 평가하고 단일 결과 객체를 왼쪽에서 오른쪽으로 각 대상 목록에 할당합니다.

  (target_list "=")+의 +는 하나 이상의 대상 목록이 있을 수 있음을 의미합니다. 이 경우 대상 목록은 a, b 및 a[b]입니다(이 경우 우리의 예시{}에서 표현식 목록은 정확히 하나의 5입니다.)
  표현식 목록을 평가한 후, 그 값은 왼쪽에서 오른쪽으로 표적 목록에 풀립니다. 그래서 우리의 예시의 경우, 5개 튜플이 a,b에 풀리고 a={}, b=5를 갖게 됩니다.
  {}가 a에 할당되었고, {}는 변형 가능한 개체입니다.
  두번째 표적 목록은 a[b]입니다. (a와 b가 모두 이전 코드에서 선언되어 있지 않으므로 에러가 날 것이라고 생각할 수도 있습니다. 그러나 a에 {}를, b에 5를 할당한 것을 기억하십시오!)
  
  이제 dictionary 안의 key 5를 튜플 ({},5)로 설정하여 순환 참조({...} 출력에서 가 이미 참조하고 있는 개체를 참조하십시오. 순환 참조의 또 다른 간단한 예는 다음과 같습니다.
  >>> some_list = some_list[0] = [0]
  >>> some_list
  [[...]]
  >>> some_list[0]
  [[...]]
  >>> some_list is some_list[0]
  True
  >>> some_list[0][0][0][0][0][0] == some_list
  True
  우리의 예시는 위의 경우와 유사합니다.(a[b][0]은 a와 동일한 객체입니다.)

  이제 정리를 하면 당신은 아래와 같이 예시를 나눌 수 있습니다.
  a, b = {}, 5
  a[b] = a, b
 
  그리고 순환 참조는 a[b][0]이 a와 같은 객체라는 사실에 의해 정당화될 수 있습니다. 