Deleting a list item while iterating
반복하는 동안 list 항목 삭제

Output:
결과:

Can you guess why the output is [2, 4]?
당신은 [2,4]인 결과값을 예측할 수 있습니까?

Explanation:
설명:

It's never a good idea to change the object you're iterating over. The correct way to do so is to iterate over a copy of the object instead, and list_3[:] does just that.
반복하고 있는 개체를 변경하는 것은 결코 좋은 생각이 아닙니다.대신 올바른 방법은 개체의 복사본을 반복하는 것이며, list_3[:]은 바로 그렇게 하는 것 입니다.

Difference between del, remove, and pop:
del,remove,pop사이 간 차이점:

del var_name just removes the binding of the var_name from the local or global namespace (That's why the list_1 is unaffected).
delvar_name은(는) Local 또는 Global namespace에서 var_name의 묶음을 제거합니다.(따라서 list_1은 영향을 받지 않습니다).

remove removes the first matching value, not a specific index, raises ValueError if the value is not found.
remove는 특정 인덱스가 아닌 첫 번째 일치 값을 제거하고 값을 찾지 못하면 ValueError가 발생합니다.

pop removes the element at a specific index and returns it, raises IndexError if an invalid index is specified.
pop은 특정 인덱스에서 요소를 제거하고 반환하며, 유효하지 않은 인덱스가 지정된 경우 IndexError를 발생시킵니다.

 why the output is [2, 4]?
왜 결과값이 [2,4]일까요?

The list iteration is done index by index, and when we remove 1 from list_2 or list_4, the contents of the lists are now [2, 3, 4]. The remaining elements are shifted down, i.e., 2 is at index 0, and 3 is at index 1. Since the next iteration is going to look at index 1 (which is the 3), the 2 gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.
목록 반복은 index별로 수행되며, list_2 또는 list_4에서 1을 제거하면 목록의 내용은 현재 [2, 3, 4]입니다. 나머지 요소는 아래로 이동한다. 즉, 2는 지수 0, 3은 지수 1이다. 다음 번 반복에서는 색인 1(3번)을 살펴보게 되므로, 2번 항목은 완전히 생략됩니다. 목록 순서에서 모든 대체 요소에서도 유사한 일이 일어날 것입니다.

Refer to this StackOverflow thread explaining the example
예제를 설명하는 이 StackOverflow 스레드를 참조하십시오.

See also this nice StackOverflow thread for a similar example related to dictionaries in Python.
Python의 Dictionary와 관련된 유사한 예는 이 StackOverflow 스레드를 참조하십시오.