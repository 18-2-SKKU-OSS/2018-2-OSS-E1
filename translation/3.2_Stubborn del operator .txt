 Stubborn del operator *
완고한 del 연산자

Output 1
결과 1.

Phew, deleted at last. You might have guessed what saved from __del__ being called in our first attempt to delete x. Let's add more twist to the example.
드디어 삭제되었습니다. 첫 번째 x 삭제 시도에서 __del__를 호출하여 저장한 내용이 무엇인지 짐작하셨을 수 있습니다. 그것은 이 예에 약간의 난이도를 증가하게 할 수 있습니다.

2.

Okay, now it's deleted ??
이제 삭제되었습니다.

Explanation:
설명:

del x doesn’t directly call x.__del__().
del x는 x.__del__()을 직접 호출하지 않습니다.

Whenever del x is encountered, Python decrements the reference count for x by one, and x.__del__() when x’s reference count reaches zero.
del x가 발생할 때마다 Python은 x에 대한 기준 카운트를 하나씩, x의 기준 카운트가 0에 도달하면 x.__del__()를 감소시킵니다.

In the second output snippet, y.__del__() was not called because the previous statement (>>> y) in the interactive interpreter created another reference to the same object, thus preventing the reference count to reach zero when del y was encountered.
두 번째 출력 snippet에서 y.__del__() 델 y가 발생할 때 참조 카운트가 0에 도달하지 못하도록 해서 이전 문(>>> y)이 동일한 개체에 대한 또 다른 참조를 만들기 때문에 호출되지 않습니다.

Calling globals caused the existing reference to be destroyed and hence we can see "Deleted!" being printed.
전역 변수를 호출하는 것은 현재 참조를 파괴시기기 때문에 우리는 "Deleted"가 출력되는 것을 알 수 있습니다.




