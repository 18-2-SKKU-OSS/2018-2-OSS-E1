▶ Evaluation time discrepancy
▶ 평가시간 불일치

Explanation:
설명:

In a generator expression, the in clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.
발전기 표현에서, 조항은 선언 시간에 평가되지만 조건 조항은 런타임에 평가됩니다.

So before runtime, array is re-assigned to the list [2, 8, 22], and since out of 1, 8 and 15, only the count of 8 is greater than 0, the generator only yields 8.
따라서 런타임 전에 어레이를 목록[2, 8, 22]에 다시 할당하고, 1, 8, 15개 중 8개만 0보다 크므로 제너레이터만 8개를 생성합니다.

The differences in the output of g1 and g2 in the second part is due the way variables array_1 and array_2 are re-assigned values.
두 번째 파트에서 g1과 g2 출력의 차이는 변수 array_1과 array_2가 값을 재할당한 방식에 기인합니다.

In the first case, array_1 is binded to the new object [1,2,3,4,5] and since the in clause is evaluated at the declaration time it still refers to the old object [1,2,3,4] (which is not destroyed).
첫 번째 경우, array_1은 새 개체[1,2,3,4,5]에 바인딩되며, 선언 시간에 절이 평가되기 때문에, 여전히 이전 개체[1,2,3,4] (파쇄되지 않습니다)를 참조합니다.

In the second case, the slice assignment to array_2 updates the same old object [1,2,3,4] to [1,2,3,4,5]. Hence both the g2 and array_2 still have reference to the same object (which has now been updated to [1,2,3,4,5]).
두 번째 경우, 어레이_2에 대한 슬라이스 할당은 동일한 이전 개체[1,2,3,4]를 [1,2,3,4,5]로 업데이트합니다. 따라서 g2와 array_2는 여전히 동일한 개체[1,2,3,4,5]로 업데이트되었습니다.